@page "/Login"
@using Drugstore.Shared.DTOs;
@using Drugstore.WEB.Auth;
@inject IRepository repository
@inject SweetAlertService sweetAlertService
@inject NavigationManager navigationManager
@inject ILoginService loginService


<h3 style="font-weight: bold;"><span class="oi oi-caret-right" style=" color: #FF9502"></span> Iniciar sesión</h3>

<EditForm Model="loginDTO" OnValidSubmit="LoginAsync">
    <DataAnnotationsValidator />

    <div class="row" style=" justify-content: center;">
        <div class="col-4" style="width: 50%;">
            <div class="mb-3">
                <label<i class="oi oi-person"></i> Email:</label>
                <div>
                    <InputText class="form-control" @bind-Value="@loginDTO.Email"/>
                    <ValidationMessage For="@(() => loginDTO.Email)" />
                </div>
            </div>
            <div class="mb-3">
                <label <i class="oi oi-key"></i> Contraseña:</label>
                <div>
                    <InputText type="password" class="form-control" @bind-Value="@loginDTO.Password" />
                    <ValidationMessage For="@(() => loginDTO.Password)" />
                </div>
            </div>
            <div class="card-footer">
            <div>
                <a class="bbtn btn-link" href="/ResendToken" Style="color: #1F78FA" >Reenviar correro de activación de cuenta</a>
            </div>
                <p><a class="bbtn btn-link" href="/RecoverPassword" Style="color: #1F78FA">¿Has olvidado tu contraseña?</a></p>
               
            </div>
            <br />
            <div>
                <button class="btn btn-primary" type="submit" style=" color: #031D38; border-color: #46E5F5; background-color:  #46E5F5">Iniciar Sesión</button>
            </div>
            
        </div>
    </div>
</EditForm>

@code {
    private LoginDTO loginDTO = new();

    private async Task LoginAsync()
    {
        var responseHttp = await repository.Post<LoginDTO, TokenDTO>("/api/accounts/Login", loginDTO);
        if (responseHttp.Error)
        {
            var message = await responseHttp.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            return;
        }

        await loginService.LoginAsync(responseHttp.Response!.Token);
        navigationManager.NavigateTo("/");
    }
}


