@page "/medicines/details/{MedicineId:int}/{CategoryId?}/"
@using Drugstore.Shared.Entities;
@using System.Net;
@using Drugstore.Shared.Entities.Medicamento;
@inject IRepository repository
@inject NavigationManager navigationManager
@inject SweetAlertService sweetAlertService

@if (medicine is null)
{
    <p>Cargando...</p>
}
else
{


    <div class="mb-2" style="display: flex; flex-wrap:wrap; align-items: center; justify-content: space-between; margin-bottom: 0rem!important;">
        <h3 style="font-weight: bold;"><span class="oi oi-caret-right" style=" color: #FF9502"></span>  Medicamento: </h3>
        <div style="padding-right: 45px;">
            @if (CategoryId is null)
            {
                <a class="btn btn-success" href="/medicines">Regresar</a>
            }
            else
            {
                <a class="btn btn-success" href="/categories/details/@CategoryId">Regresar</a>
            }
            
        </div>

    </div>
    <div style="font-variant: unicase; font-size: 39px; border-bottom: 3px solid #FF9502; inline-size: max-content">
        @medicine.Name
    </div>

    <div style="padding: 12px">
        En construcción...
    </div>



}

@code {
    private Medicine? medicine;
    public List<Category>? categories { get; set; }


    private int currentPage = 1;
    private int totalPages;

    [Parameter]
    public int MedicineId { get; set; }

    [Parameter]
    public string CategoryId { get; set; }

    [Parameter]
    [SupplyParameterFromQuery]
    public string Page { get; set; } = "";

    [Parameter]
    [SupplyParameterFromQuery]
    public string Filter { get; set; } = "";


    protected override async Task OnInitializedAsync()
    {
        await Load();
    }
    private async Task SelectedPage(int page)
    {
        currentPage = page;
        await Load(page);
    }

    private async Task Load(int page = 1)
    {
        if (!string.IsNullOrWhiteSpace(Page))
        {
            page = Convert.ToInt32(Page);
        }

        string url1 = string.Empty;
        string url2 = string.Empty;

        if (string.IsNullOrEmpty(Filter))
        {
            url1 = $"api/categories?page={page}&MedicineId={MedicineId}";
            url2 = $"api/categories/totalPages?MedicineId={MedicineId}";
        }
        else
        {
            url1 = $"api/categories?page={page}&filter={Filter}&MedicineId={MedicineId}";
            url2 = $"api/categories/totalPages?filter={Filter}&MedicineId={MedicineId}";
        }


        var responseHppt = await repository.Get<List<Category>>(url1);
        var responseHppt2 = await repository.Get<int>(url2);
        var responseHttp3 = await repository.Get<Medicine>($"/api/medicines/{MedicineId}");
        if (responseHttp3.Error)
        {
            if (responseHttp3.HttpResponseMessage.StatusCode == HttpStatusCode.NotFound)
            {
                navigationManager.NavigateTo("/medicines");
                return;
            }

            var message = await responseHttp3.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            return;
        }
        categories = responseHppt.Response!.ToList();
        totalPages = responseHppt2.Response!;
        medicine = responseHttp3.Response;

        }

    private async Task DeleteAsync(int id)
    {
        var result = await sweetAlertService.FireAsync(new SweetAlertOptions
            {
                Title = "Confirmación",
                Text = "¿Realmente deseas eliminar el registro?",
                Icon = SweetAlertIcon.Question,
                ShowCancelButton = true,
                CancelButtonText = "No",
                ConfirmButtonText = "Si"
            });

        var confirm = string.IsNullOrEmpty(result.Value);
        if (confirm)
        {
            return;
        }

        var responseHttp = await repository.Delete($"/api/categories/{id}");
        if (responseHttp.Error)
        {
            if (responseHttp.HttpResponseMessage.StatusCode != HttpStatusCode.NotFound)
            {
                var message = await responseHttp.GetErrorMessageAsync();
                await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
                return;
            }
        }

        await Load();
    }

    private async Task CleanFilterAsync()
    {
        Filter = string.Empty;
        await ApplyFilterAsync();
    }

    private async Task ApplyFilterAsync()
    {
        int page = 1;
        await Load(page);
        await SelectedPage(page);
    }
}
