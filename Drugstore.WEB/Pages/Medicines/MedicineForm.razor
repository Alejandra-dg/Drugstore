@using Drugstore.Shared.Entities.Medicamento;
@using Drugstore.WEB.Shared;
@inject SweetAlertService swal

<NavigationLock OnBeforeInternalNavigation="OnBeforeInternalNavigation"></NavigationLock>

<EditForm EditContext="editContext" OnValidSubmit="OnValidSubmit" style="display: flex;justify-content: center">

    <DataAnnotationsValidator />
  
    <div class="card" style="width: 700px;">
        <div class="card-header">
            <span>
                <i class="oi oi-check" /> Completa el formulario:
            </span>
        </div>
        <div class="card-body">

            <div class="row">
                <div class="col-12">
                    <div class="mb-3">
                        <label>Nombre:</label>
                        <div>
                            <InputText class="form-control" @bind-Value="@Medicine.Name" />
                             <ValidationMessage For="@(() => Medicine.Name)" />
                        </div>
                    </div>


                    <div class="mb-3">
                        <label>Descripción:</label>
                        <div>
                             <InputText class="form-control" @bind-Value="@Medicine.Description" />
                             <ValidationMessage For="@(() => Medicine.Description)" />
                        </div>
                    </div>
                    
                    @if(CategoryId is null){
                    
                        <div class="mb-3">
                            <label>Categoría:</label>
                            <div>
                                <InputText class="form-control" @bind-Value="@CategoryIdValue" />
                            </div>
                        </div>
                    } 

                    <div class="mb-3">
                        <label>Precio:</label>
                        <div>
                            <InputNumber class="form-control" @bind-Value="@Medicine.Price" />
                            <ValidationMessage For="@(() => Medicine.Price)" />
                        </div>
                    </div>


                    <div class="mb-3">
                        <label>Stock:</label>
                        <div>
                             <InputNumber class="form-control" @bind-Value="@Medicine.Stock" />
                             <ValidationMessage For="@(() => Medicine.Stock)" />
                        </div>
                    </div>

                   @* <div class="mb-3">
                        <InputImg Label="Foto" ImageSelected="ImageSelected" ImageURL="@imageUrl" />
                    </div>
*@

                </div>
            </div>
        </div>
        <div style="display: flex;flex-direction: row; column-gap: 15px; align-items: center; justify-content: center;  padding: 10px">
            <button class="btn btn-primary" type="submit" style="background-color: #1baec2;border-color: #1baec2;"> Guardar cambios</button>
            <button class="btn btn-success" @onclick="ReturnAction">Regresar</button>
        </div>
    </div>


</EditForm>



<!--Llave C#-->
@code {


    private EditContext editContext = null!;
    //private MedicineCreateDTO MedicineCreateDTO = new();
    //private string? @imageUrl;

    //protected override async Task OnInitializedAsync()
    //{
    //    //await LoadCategoriesAsync();

    //    if (!string.IsNullOrEmpty(MedicineCreateDTO.Photo))
    //    {
    //        imageUrl = MedicineCreateDTO.Photo;
    //        MedicineCreateDTO.Photo = null;
    //    }
    //}

    //private void ImageSelected(string imagenBase64)
    //{
    //    MedicineCreateDTO.Photo = imagenBase64;
    //    imageUrl = null;
    //}

    [EditorRequired]
    [Parameter]
    public string CategoryId { get; set; } = "";
    public string CategoryIdValue { get; set; } = "";

    protected override void OnInitialized()
    {
        editContext = new(Medicine);
        CategoryIdValue = CategoryId;
    }


    [EditorRequired]
    [Parameter]
    public Medicine Medicine { get; set; } = null!;


    // El boton hace el submit 
    [EditorRequired]
    [Parameter]
    public EventCallback OnValidSubmit { get; set; }

    // El boton hace el regreso a la pagina anterior 
    [EditorRequired]
    [Parameter]
    public EventCallback ReturnAction { get; set; }

    public bool FormPostedSuccessfully { get; set; } = false;

    private async Task OnBeforeInternalNavigation(LocationChangingContext context)
    {
        var formWasEdited = editContext.IsModified();

        if (!formWasEdited)
        {
            return;
        }

        if (FormPostedSuccessfully)
        {
            return;
        }

        var result = await swal.FireAsync(new SweetAlertOptions
            {
                Title = "Confirmación",
                Text = "¿Está seguro de abandonar la página? (podrias perder los cambios..)",
                Icon = SweetAlertIcon.Warning,
                ShowCancelButton = true
            });

        var confirm = !string.IsNullOrEmpty(result.Value);

        if (confirm)
        {
            return;
        }

        context.PreventNavigation();
    }



}

