@page "/medicines"
@using Drugstore.Shared.Entities.Medicamento;
@using Drugstore.WEB.Repositories;
@using Drugstore.Shared.Entities;
@using Microsoft.AspNetCore.Authorization;
@inject NavigationManager navigationManager
@inject SweetAlertService swal

@*condición para que solo el admin vea esta sección*@
@attribute [Authorize(Roles = "Admin")]

@inject IRepository repository

<h3 style="font-weight: bold;"><span class="oi oi-caret-right" style=" color: #FF9502"></span> Medicamentos</h3>

<div class="mb-2" style="display: flex; flex-wrap:wrap; align-items: center; justify-content: flex-end; padding-right: 30px">
    <div>
        <a class="btn btn-primary" href="/medicines/create" style="background-color: #FF9502; border-color: #FF9502" <i class="oi oi-plus"></i> Nuevo Medicamento</a>
    </div>
    <div class="mx-2">
        <input style="width: 500px;" type="text" class="form-control" id="titulo" placeholder="Buscar medicamento..." @bind-value="Filter" />
    </div>
    <div>
        <button type="button" class="btn btn-outline-primary search-button" @onclick="ApplyFilterAsync" style=" color: #009688;border-color: #009688;">
            <i class="oi oi-magnifying-glass" /> Buscar</button>
        <button type="button" class="btn btn-outline-danger" @onclick="CleanFilterAsync"><i class="oi oi-ban" /> Limpiar</button>
    </div>
</div>


<Pagination CurrentPage="currentPage"
            TotalPages="totalPages"
            SelectedPage="SelectedPage" />


<GenericList MyList="Medicines">

    <Body>
        <table class="table table-striped">
            <tbody>
                @foreach (var medicine in Medicines!)
                {
                    <tr>

                        <td style="vertical-align: middle;">
                            @medicine.Name
                        </td>

                        <td style="text-align-last: end; padding-right: 12px">
                                <a href="/medicines/details/@medicine.Id" class="btn btn-info">Detalles</a>
                                <a href="/medicines/edit/@medicine.Id" class="btn btn-warning">Editar</a>
                                <button class="btn btn-danger" @onclick=@(() => Delete(medicine))>Borrar</button>
        
                            </td>
                    </tr>
                }
                </tbody>
        </table>

    </Body>

</GenericList>

@code {

    public List<Medicine>? Medicines { get; set; }
    // Codigo de paginación 
    private int currentPage = 1;
    private int totalPages;


    [Parameter]
    [SupplyParameterFromQuery]
    public string Page { get; set; } = "";

    [Parameter]
    [SupplyParameterFromQuery]
    public string Filter { get; set; } = "";




    protected async override Task OnInitializedAsync()
    {
        await Load();
    }

    private async Task SelectedPage(int page)
    {
        currentPage = page;
        await Load(page);
    }


    private async Task Load(int page = 1) // inicio de la pagina
    {
        if (!string.IsNullOrWhiteSpace(Page))
        {
            page = Convert.ToInt32(Page);
        }

        string url1 = string.Empty;
        string url2 = string.Empty;

        if (string.IsNullOrEmpty(Filter))
        {
            url1 = $"api/medicines?page={page}";
            url2 = $"api/medicines/totalPages";
        }
        else
        {
            url1 = $"api/medicines?page={page}&filter={Filter}";
            url2 = $"api/medicines/totalPages?filter={Filter}";
        }



        var responseHppt = await repository.Get<List<Medicine>>(url1);
        var responseHppt2 = await repository.Get<int>(url2);
        Medicines = responseHppt.Response!;
        totalPages = responseHppt2.Response!;
    }


    private async Task Delete(Medicine medicine)
    {
        var result = await swal.FireAsync(new SweetAlertOptions
            {
                Title = "Confirmación",
                Text = "¿Esta seguro que quieres borrar el registro?",
                Icon = SweetAlertIcon.Question,
                ShowCancelButton = true
            });

        var confirm = string.IsNullOrEmpty(result.Value);

        if (confirm)
        {
            return;
        }

        var responseHTTP = await repository.Delete($"api/medicines/{medicine.Id}");

        if (responseHTTP.Error)
        {
            if (responseHTTP.HttpResponseMessage.StatusCode == System.Net.HttpStatusCode.NotFound)
            {
                navigationManager.NavigateTo("/");
            }
            else
            {
                var mensajeError = await responseHTTP.GetErrorMessageAsync();
                await swal.FireAsync("Error", mensajeError, SweetAlertIcon.Error);
            }
        }
        else
        {
            await Load();
        }
    }
        private async Task CleanFilterAsync()
        {
            Filter = string.Empty;
            await ApplyFilterAsync();
        }

        private async Task ApplyFilterAsync()
        {
            int page = 1;
            await Load(page);
            await SelectedPage(page);
        }

}
